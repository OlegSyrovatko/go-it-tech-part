{"version":3,"file":"static/js/21.0e7825ab.chunk.js","mappings":"+OAAaA,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,SAAjB,EACrBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,OAAOG,KAAjB,E,oBCDvBC,EAAY,SAAAL,GAAK,OAAIA,EAAMM,QAAQC,KAAlB,E,kBCEjBC,EAAOC,EAAAA,EAAAA,IAAH,0E,kDCwCjB,EA/Be,WACb,IAAMC,GAAgBC,EAAAA,EAAAA,IAAYN,GAE5BO,GAAWC,EAAAA,EAAAA,MAOjB,OACE,SAACL,EAAD,WACE,UAACM,EAAA,EAAD,CAAaC,QAAQ,WAAWC,GAAI,CAAEC,SAAU,KAAhD,WACE,SAACC,EAAA,EAAD,CAAYC,GAAG,eAAf,qBACA,UAACC,EAAA,EAAD,CACEC,QAAQ,eACRF,GAAG,gBACHZ,MAAOG,EAEPY,SAfa,SAAAC,GACnB,IAAMC,EAAMD,EAAEE,OAAOlB,MAErBK,GAASc,EAAAA,EAAAA,GAAgBF,GAC1B,EAYOG,MAAM,SANR,WAQE,SAACC,EAAA,EAAD,CAAUrB,MAAM,GAAhB,kBACA,SAACqB,EAAA,EAAD,CAAUrB,MAAM,SAAhB,qBACA,SAACqB,EAAA,EAAD,CAAUrB,MAAM,aAAhB,+BAKT,ECtCYsB,EAAKpB,EAAAA,EAAAA,IAAH,kFAMFqB,EAAIrB,EAAAA,EAAAA,EAAH,2CAIDsB,EAAStB,EAAAA,EAAAA,OAAH,yVCcnB,EArBsB,SAAC,GAA6C,IAA3CU,EAA0C,EAA1CA,GAAIa,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,OAAQhC,EAAwB,EAAxBA,OAAQiC,EAAgB,EAAhBA,UAKjD,OACE,UAACL,EAAD,YACE,SAACC,EAAD,UAAIE,KACJ,SAACF,EAAD,UAAIG,KACJ,SAACH,EAAD,UAAI7B,KACJ,SAAC6B,EAAD,UAAII,KACJ,SAACH,EAAD,CACEI,QAAS,WAER,EAHH,sBALOhB,EAcZ,ECIYiB,GA1BY3B,EAAAA,EAAAA,IAAH,kEAKAA,EAAAA,EAAAA,IAAH,mEAKCA,EAAAA,EAAAA,KAAH,kJASWA,EAAAA,EAAAA,IAAH,wDAOLA,EAAAA,EAAAA,IAAH,oEAKJsB,EAAStB,EAAAA,EAAAA,OAAH,wcAuCN4B,GAjBc5B,EAAAA,EAAAA,OAAH,yVAiBNA,EAAAA,EAAAA,IAAH,wGCdf,EAtCe,WACZ,IAAMG,GAAWC,EAAAA,EAAAA,MAGZyB,GAAiB3B,EAAAA,EAAAA,IAAYR,GAI7BD,GAAYS,EAAAA,EAAAA,IAAYZ,GAWhC,OAVEwC,EAAAA,EAAAA,YAAU,WACJrC,EAAWsC,EAAAA,QAAAA,OAAe,cACzBA,EAAAA,QAAAA,QAEN,GAAE,CAACtC,KAEJqC,EAAAA,EAAAA,YAAU,WACR3B,GAAS6B,EAAAA,EAAAA,KACV,GAAE,CAAC7B,KAGJ,+BACE,UAACwB,EAAD,YACI,SAAC,KAAD,CAAMM,GAAG,IAAT,UAAa,SAAC,EAAD,CAAQC,KAAK,SAAb,qBAEG,mBAAM,mBACtB,SAAC,EAAD,IACGL,EAAeM,OAAS,IAC3B,SAACP,EAAD,UACGC,EAAeO,KAAI,SAAAC,GAAK,OACvB,SAAC,GAAD,UAAkCA,GAAdA,EAAM3B,GADH,UASlC,C","sources":["redux/tweets/selectors.js","redux/selectors.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/TweetListItem/TweetListItem.styled.jsx","components/TweetListItem/TweetListItem.jsx","views/Tweets.styled.js","views/Tweets.js"],"sourcesContent":["export const selectLoading = state => state.tweets.isLoading;\nexport const selectAllTweets = state => state.tweets.items;","export const getFilter = state => state.filters.value;\n","import styled from '@emotion/styled';\n\nexport const Find = styled.div`\n  display: flex;\n  gap: 5px;\n  line-height: 0;\n`;\n","// import React, { useState } from 'react';\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setStatusFilter } from 'redux/filtersSlice';\nimport { getFilter } from 'redux/selectors';\nimport { Find } from './Filter.styled';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\n\nconst Filter = () => {\n  const filterDefault = useSelector(getFilter);\n  // const [filter, setFilter] = useState('');\n  const dispatch = useDispatch();\n  const handleChange = e => {\n    const val = e.target.value;\n    // setFilter(val);\n    dispatch(setStatusFilter(val));\n  };\n\n  return (\n    <Find>\n      <FormControl variant=\"outlined\" sx={{ minWidth: 200 }}>\n        <InputLabel id=\"filter-label\">Filter</InputLabel>\n        <Select\n          labelId=\"filter-label\"\n          id=\"filter-select\"\n          value={filterDefault}\n          // value={filter || filterDefault}\n          onChange={handleChange}\n          label=\"Filter\"\n        >\n          <MenuItem value=\"\">All</MenuItem>\n          <MenuItem value=\"follow\">Follow</MenuItem>\n          <MenuItem value=\"followings\">Followings</MenuItem>\n        </Select>\n      </FormControl>\n    </Find>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const Li = styled.div`\n  display: flex;\n  gap: 15px;\n  align-items: baseline;\n`;\n\nexport const P = styled.p`\n  line-height: 0;\n`;\n\nexport const Button = styled.button`\n  background-color: #fff;\n  color: #000;\n  padding: 2px 5px 2px 5px;\n  height: 25px;\n  border-radius: 4px;\n  border: 1px solid #000;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #000;\n    color: #fff;\n  }\n`;\n","// import { useDispatch } from 'react-redux';\n// import { deleteContact } from 'redux/contacts/operations';\n\nimport { Li, P, Button } from './TweetListItem.styled';\n\nconst TweetListItem = ({ id, user, avatar, tweets, followers }) => {\n  //   const dispatch = useDispatch();\n\n  //   const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <Li key={id}>\n      <P>{user}</P>\n      <P>{avatar}</P>\n      <P>{tweets}</P>\n      <P>{followers}</P>\n      <Button\n        onClick={() => {\n          //   handleDelete(id);\n        }}\n      >\n        Follow\n      </Button>\n    </Li>\n  );\n};\nexport default TweetListItem;\n","import styled from '@emotion/styled';\n\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Avatar = styled.img`\n  margin-right: 4px;\n  margin-left: 4px;\n`;\n\nexport const Name = styled.span`\n  font-weight: 700;\n  font-size: 14px;\n  margin-right: 12px;\n  @media (max-width: 767px) {\n    font-size: 12px;\n  }\n`;\n\nexport const ContactsHead = styled.div`\n  display: flex;\n  gap: 15px;\n`;\n\n\n\nexport const Book = styled.div`\n  margin-top: 20px;\n  margin-left: 20px;\n`;\n\nexport const Button = styled.button`\n  font-size: 16px;\n  line-height: 26px;\n  background-color: #fff;\n  color: #000;\n  padding: 5px 15px 5px 15px;\n  height: 40px;\n  border-radius: 5px;\n  border: 2px solid #000;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #000;\n    color: #fff;\n  }\n  @media (max-width: 767px) {\n    padding: 5px 7px 5px 7px;\n  }\n`;\n\nexport const CloseButton = styled.button`\n  background-color: #fff;\n  color: #000;\n  padding: 2px 5px 2px 5px;\n  height: 25px;\n  border-radius: 4px;\n  border: 1px solid #000;\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #000;\n    color: #fff;\n  }\n`;\n\nexport const UL = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0px;\n  margin-top: 10px;\n`;","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\n// import { getFilter } from 'redux/selectors';\n\nimport { fetchTweets } from 'redux/tweets/operations';\nimport { selectLoading } from 'redux/tweets/selectors';\nimport { selectAllTweets } from 'redux/tweets/selectors';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nimport Filter from 'components/Filter';\nimport TweetListItem from 'components/TweetListItem';\n\nimport {\n  Book,\n  Button,\n  UL,\n  // ContactsHead,\n} from './Tweets.styled';\n\n\nconst Tweets = () => {\n   const dispatch = useDispatch();\n  // const filter = useSelector(getFilter);\n  \n  const filteredTweets = useSelector(selectAllTweets);\n  // const filteredTweets = tweets.filter(contact =>\n  //   contact.name.toLowerCase().includes(lowerFilter)\n  // );\n  const isLoading = useSelector(selectLoading);\n  useEffect(() => {\n    if (isLoading) Loading.circle('Loading...')\n    else Loading.remove()\n      \n  }, [isLoading]);\n  \n  useEffect(() => {\n    dispatch(fetchTweets());\n  }, [dispatch]);\n\nreturn (\n  <>\n    <Book>\n        <Link to='/'><Button type=\"button\" >\n           Back\n        </Button></Link><br /><br />\n        <Filter />\n          {filteredTweets.length > 0 && (\n        <UL>\n          {filteredTweets.map(tweet => (\n            <TweetListItem key={tweet.id} {...tweet} />\n          ))}\n        </UL>\n      )}\n    </Book>\n  </>\n\n );\n};\nexport default Tweets;\n\n"],"names":["selectLoading","state","tweets","isLoading","selectAllTweets","items","getFilter","filters","value","Find","styled","filterDefault","useSelector","dispatch","useDispatch","FormControl","variant","sx","minWidth","InputLabel","id","Select","labelId","onChange","e","val","target","setStatusFilter","label","MenuItem","Li","P","Button","user","avatar","followers","onClick","Book","UL","filteredTweets","useEffect","Loading","fetchTweets","to","type","length","map","tweet"],"sourceRoot":""}